<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>SMIL Player application</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.0/font/bootstrap-icons.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <style>
    .indicators {
      list-style: none;
      display: flex;
      justify-content: space-between;
      padding: 1rem 0;
      width: 100%;
    }

    .indicator {
      --size: 2.5rem;
      width: var(--size);
      height: var(--size);
      border-radius: 50%;
      line-height: var(--size);
      background: #f8f8f8;
      text-align: center;
      position: relative;
      z-index: 200;
    }

    .indicator.active {
      background: tomato;
      color: #fff;
      box-shadow: 1px 3px 12px #18181811;
    }
  </style>
</head>

<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup"
        aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav">
          <a class="nav-link d-none" aria-current="page" href="/">Home</a>
          <a class="nav-link active" aria-current="page" href="/messages">Messages</a>
        </div>
      </div>
    </div>
  </nav>

  <div class="container py-3">
    {{ session.info }}
    {{{body}}}
  </div>

  {{!--
  <script src="./../../public/js/ws.js" type="text/javascript"></script> --}}

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js"
    integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut"
    crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js"
    integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k"
    crossorigin="anonymous"></script>

  {{!-- web socket script --}}
  <script>
    const ws = new WebSocket('ws://localhost:5000');

    ws.onerror = function (err) {
      console.error('failed to make websocket connection');
      throw err;
    };

    ws.onopen = function () {
      console.log('connection established');
    };

    const ul = document.querySelector("#web-socket-data");
    ws.onmessage = (event) => {
      let messageData;
      const container = document.querySelector('.container');

      if (event.data instanceof Blob) {
        const reader = new FileReader();


        reader.onload = () => {
          const toaster = document.createElement('div');
          toaster.innerHTML = `<div class="alert alert-success d-flex align-items-center" role="alert">
		  <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg>
		  <div>
		   ${reader.result}
			<a href="/play" class="alert-link">play message</a> 
		  </div>
		</div> `;
          container.appendChild(toaster);
        }
        reader.readAsText(event.data);
      }
    };

  </script>

  <script type="module">
    const form = document.querySelector('#smil-form');
    const stepOneSection = document.querySelector('#step-one');
    const stepTwoSection = document.querySelector('#step-two');
    const stepThreeSection = document.querySelector('#step-three');
    const previewDataBtn = document.querySelector('#preview-data');
    const playButton = document.querySelector('#play');
    console.log('playbutton: ', playButton);

    let currentStep = 1;

    /* indicators */
    const indicators = Array.from(document.querySelectorAll('.indicator'));

    /* form buttons */
    const nextButtons = Array.from(document.querySelectorAll('.btn-next'));
    const prevButtons = Array.from(document.querySelectorAll('.btn-prev'));
    const stepOneButton = document.querySelector('#step-one-button');

    /* Form fields */
    const inputType = document.querySelector('#inputType');
    const textContentGroup = document.querySelector('#textContent-group');

    const stepTwoFields = Array.from(document.querySelectorAll('#step-two .form-group'));

    const setCurrentStep = (index) => {
      currentStep = index;
      indicators.map(item => item.classList.remove('active'));
      indicators[index - 1].classList.add('active');
    }
    /* Create a global functionality for next buttons */
    nextButtons.forEach(button => button.addEventListener('click', e => {
      e.preventDefault();
      const nextStep = e.target.dataset.step;
      switch (nextStep) {
        case '2':
          showStepTwo();
          break;
        case '3':
          showStepThree();
          break;
      }
    }));

    /* Create a global functionality for prev buttons */
    prevButtons.forEach(button => button.addEventListener('click', e => {
      e.preventDefault();
      const prevStep = e.target.dataset.step;
      switch (prevStep) {
        case '1':
          showStepOne();
          break;
        case '2':
          showStepTwo();
          break;
      }
    }));

    function showStepOne() {
      setCurrentStep(1);
      // hide steps 2 and 3
      hideSteps([stepTwoSection, stepThreeSection]);
      stepOneSection.classList.remove('d-none');
      Array.from(stepOneSection.children).forEach(child => child.classList.remove('d-none'));
    }

    function showStepTwo() {
      setCurrentStep(2);
      // hide steps 1 and 3
      hideSteps([stepOneSection, stepThreeSection]);
      // show current step
      stepTwoSection.classList.remove('d-none');
      Array.from(stepTwoSection.children).forEach(child => child.classList.remove('d-none'));

      switch (form.contentType.value) {
        case 'text':
          // show only the text fields
          showStepTwoField('textContent-group');
          // hide other fields
          break;
        case 'image':
          showStepTwoField('imageUrl-group');
          break;
        case 'imageFile':
          showStepTwoField('imageFileSrc-group');
          break;
        case 'video':
          showStepTwoField('videoUrl-group');
          break;
        case 'videoFile':
          showStepTwoField('videoFileSrc-group');
          break;
      }
    }

    function showStepThree() {
      setCurrentStep(3);
      // hide stetps 1 and 2
      hideSteps([stepOneSection, stepTwoSection]);
      stepThreeSection.classList.remove('d-none');
      Array.from(stepThreeSection.children).forEach(child => child.classList.remove('d-none'));
    }

    function showStepTwoField(fieldId) {
      stepTwoFields.map(item => {
        if (item.id === fieldId) {
          item.classList.remove('d-none');
        } else {
          item.classList.add('d-none');
        }
      });
    }

    function hideSteps(stepsArr) {
      stepsArr.forEach(item => item.classList.add('d-none'));
    }

    playButton.addEventListener('click', e => {
      e.preventDefault(); // benefit of doubt
      fetch("localhost:8000/play", { method: "get" })
        .then(res => console.log('res'))
        .catch(err => console.log('err: ', err));
    });

  </script>
</body>

</html>
